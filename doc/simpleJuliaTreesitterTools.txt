*simpleJuliaTreesitterTools.txt* treesitter-powered... something for Julia
*simpleJuliaTreesitterTools.nvim*

Author:   Daniel M. Sussman 
Homepage: <https://github.com/DanielMSussman/simpleJuliaTreesitterTools.nvim>
License:  MIT license

==============================================================================
CONTENTS                                   *simpleJuliaTreesitterTools-contents*

    INTRO ................................... |simpleJuliaTreesitterTools-intro|
    CONFIGURATION ................... |simpleJuliaTreesitterTools-configuration|
    OPTIONS ............................... |simpleJuliaTreesitterTools-options|
    COMMANDS ............................. |simpleJuliaTreesitterTools-commands|

==============================================================================
INTRO                                         *simpleJuliaTreesitterTools-intro*

simpleJuliaTreesitterTools is a plugin that defines a small number of commands
for... well, at the moment just linting Julia buffers and projects for style
guide naming violations.
More documentation if it is ever needed.


==============================================================================
CONFIGURATION                         *simpleJuliaTreesitterTools-configuration*

For basic setup with all of the defaults:
>lua
>lua
    {
    "DanielMSussman/simpleJuliaTreesitterTools.nvim",
    dependencies = { 'nvim-treesitter/nvim-treesitter'},
    ft = "julia",
    }
<

To customize the behavior of the plugin, call the setup function. Below is an
example with all available options set to their default values.
>lua
    {
    "DanielMSussman/simpleJuliaTreesitterTools.nvim",
    dependencies = { 'nvim-treesitter/nvim-treesitter'},
    ft = "julia",
    config = function()
	require("simpleJuliaTreesitterTools").setup({
	rules = {
	    ["Constant"] = "SCREAMING_SNAKE_CASE",
	    ["Module"] = "UpperCamelCase",
	    ["Struct"] = "UpperCamelCase",
	    ["AbstractType"] = "AbstractUpperCamelCase",
	    ["Function"] = "snake_case",
	},
	defaultApproach = "treesitter",
	lint_action = "quickfix",
	projectRootFile = "Project.toml",
	projectDirectory = "/src",
	})
    end
    }
<
==============================================================================
OPTIONS                                     *simpleJuliaTreesitterTools-options*

`rules` (table)
    - Default: (see example above)
    - maps Julia language constructs to desired naming conventions
	- valid keys: `"Constant"`, `"Module"`, `"Struct"`, `"AbstractType"`,
	    `"Function"`	
	- valid values: `"snake_case"`, `"SCREAMING_SNAKE_CASE"`, 
	    `"UpperCamelCase"`, `"camelCase"`, `"AbstractUpperCamelCase"`,
	    `"lowercase"`, `"UPPERCASE"`

`defaultApproach` (string)
    - Default: `"treesitter"
    - Determines the backend used to find definitions. The `"lsp"` option is 
      experimental / not recommend for use

`lint_action` (string)
    - Default: `"quickfix"`
    - Controls what happens if naming violations are found.
	- `"quickfix"` populates the quickfix list.
	- `"jump"` jumps to the first violation. Subsequent violations can be
	  jumped to using the `cycle_violations()` command.

`projectRootFile` (string)
    - Default: `"Project.toml"
    - When running a project-wide lint, the plugin will search upward from
      the current buffer for a file with this name to identify the project's
      root directory.

`projectDirectory` (string)
    - Default: `"/src"
    - Once the project root is found, the plugin will recursively search for 
      all `.jl` files within this subdirectory.

==============================================================================
COMMANDS                                   *simpleJuliaTreesitterTools-commands*

>lua
    require('simpleJuliaTreesitterTools').lint_buffer_names()
<
Comb through the buffer for constant / module / type / function definitions
and find all violations of the naming conventions.

>lua
    require('simpleJuliaTreesitterTools').lint_project_names()
<
From the current directory, search upward until a `Project.toml` file is 
found, then recursively find all `.jl` files in the `src/` directory.
Comb through all files for constant / module / type / function definitions
and find all violations of the naming conventions.

>lua
    require('simpleJuliaTreesitterTools').cycle_violations()
<
Assuming that you have the `lint_action=jump` option set, this will advance
the cursor to the next item in the current violations list. New buffers will
be opened up if that next item is in a new file.

 vim:tw=78:ts=8:noet:ft=help:norl:
